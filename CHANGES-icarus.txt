1.0.4

- update of progress tracking in distributed restore

1.0.3

- update to Esop 1.0.3 with rewritten error reporting logic

1.0.2

- update to Esop 1.0.2 which enabled restoration of latest snaphot when snapshots with same name were used upon a backup

1.0.1

- fixed GET /topology endpoint
- it is possible to disable CORS by '--disable-cors' - integration with sidecar-common 1.3.9. CORS is enabled by default.

1.0.0

- renamed all references to Sidecar and used "Icarus" when possible and appropriate
- fixed bug when hardlinking restoration failed on already existing schema.cql. This was happening
  when a restoration was done repeatedly as truncating does not remove schema.cql copied there by restore process.
  From now on, schema.cql is filtered out and it is not linked into data directories or Cassandra.

Project was renamed to Instalustr Icarus

2.0.0-alpha9-SNAPSHOT

- it is possible to connect to S3 via proxy, connection details have their own entity in all backup/restore operations
- fixed "insecure" flag for Azure, initially, it was possible to connect insecurely (via HTTP instead of HTTPS) only for
  S3 while other providers were ignore. From now it is possible to ignore this for Azure as well. By default, it is connecting
  securely.

2.0.0-alpha8

no noticeable changes in Sidecar, just alignment with backup/restores jar 2.0.0-alpha8:

- removing of cleanup methods upon backuper closing
- it is possible to skip bucket verification (check if that bucket exists, it was causing
  problems for accounts which can not check this as their permission / security model does not allow to list buckets
- increased termination timeout for finisher executor in AbstractTracker to 5 minutes
- adding equals method for Unit and clearing an upload/download session upon its completion
- possibility to upload individual commit log file to remote backup location, not only whole directories
- automatic changing of storage location "url" with help of JMX if a node to backup commit logs for is online,
  this integrates nicely with the backup architecture of Cassandra via commitlog_archiving.properties
- BPS computed in UploadTracker is divided by number of concurrent connections
- initial_token field in cassandra.yaml is updated with tokens automatically if it is not present as well if
  it is there, but just commented out, in InPlaceRestorationStrategy

2.0.0-alpha7

- introduction of "newCluster" field in restoration JSON as well as --restore-into-new-cluster console flag
  if provided, in-place restoration will pick only keyspaces necessary for bootstrapping, e.g system_schema, while
  other system keyspaces will be regenerated, this is useful for restore-from-scratch scenarios
- initial_token field in cassandra.yaml is updated with tokens automatically if it is not present, in InPlaceRestorationStrategy

2.0.0-alpha6

- intoduction of parallel backups
- manifest rewritten to JSON